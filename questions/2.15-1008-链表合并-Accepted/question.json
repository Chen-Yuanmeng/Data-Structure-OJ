{
  "id": 29,
  "tags": [
    "链表"
  ],
  "created_by": {
    "id": 1,
    "username": "admin",
    "real_name": null
  },
  "template": {},
  "_id": "1008",
  "title": "2.15-链表合并",
  "description": "<p><span style=\"color: rgb(51, 51, 51);\">已知指针ha和hb分别指向两个单链表的头结点，并且已知两个链表的长度分别为m和n。试写一算法将这两个链表连接在一起（即令其中一个表的首元节点连在另一个表的最后一个节点之后），假设指针hc指向连接后的链表的头结点，并要求算法以尽可能短的时间完成链接运算。</span><br /></p>",
  "input_description": "<p><span style=\"color: rgb(51, 51, 51);\">输入包括三行，第一行是两个链表的长度m和n，第二行和第三行分别为链表ha和hb中的元素，以空格分隔。</span><br /></p>",
  "output_description": "<p><span style=\"color: rgb(51, 51, 51);\">输出合并后的链表hc，元素以空格分隔</span><br /></p>",
  "samples": [
    {
      "input": "5 3\n1 2 3 4 5\n1 2 3",
      "output": "1 2 3 1 2 3 4 5"
    }
  ],
  "hint": "",
  "languages": [
    "C",
    "C++",
    "Golang",
    "Java",
    "JavaScript",
    "Python2",
    "Python3"
  ],
  "create_time": "2023-07-20T04:31:35.980683Z",
  "last_update_time": null,
  "time_limit": 1000,
  "memory_limit": 256,
  "io_mode": {
    "input": "input.txt",
    "output": "output.txt",
    "io_mode": "Standard IO"
  },
  "spj": false,
  "spj_language": null,
  "rule_type": "ACM",
  "difficulty": "Low",
  "source": "",
  "total_score": 0,
  "submission_number": 309,
  "accepted_number": 144,
  "statistic_info": {
    "0": 144,
    "3": 1,
    "4": 21,
    "-1": 114,
    "-2": 29
  },
  "share_submission": false,
  "contest": null,
  "my_status": 0
}