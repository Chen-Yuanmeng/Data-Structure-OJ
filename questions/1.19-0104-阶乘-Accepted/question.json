{
  "id": 25,
  "tags": [
    "绪论"
  ],
  "created_by": {
    "id": 1,
    "username": "admin",
    "real_name": null
  },
  "template": {},
  "_id": "0104",
  "title": "1.19-阶乘",
  "description": "<p><span style=\"color: rgb(51, 51, 51);\">试编写算法，计算 $i!\\cdot{2^i} (i=0,1,\\ldots,n-1) $的值并分别存入数组$a[arrsize]$的各个分量中。假设计算机中允许的整数最大值为$MAXINT=2^{32}-1$, 则当$n&gt;arrsize$ 或对某个 $k(0 \\le k \\le n-1) $使 $k!\\cdot{2^k} &gt; MAXINT$ 时，应按出错处理。</span><br /></p>",
  "input_description": "<ul><li>输入为两个数，用空格隔开，分别表示 $n$ 和 $arrsize$。其中 $0 \\lt n, arrsize \\le 20 $</li></ul>",
  "output_description": "<p style=\"margin-left: 0px;\">* 若没有发生出错，则依次输出$i!\\cdot{2^i}(i=0,1,\\ldots,n-1)$ 的每个分量，用空格隔开。</p><p>* 若发生出错，则直接输出-1。</p>",
  "samples": [
    {
      "input": "3 10",
      "output": "1 2 8"
    },
    {
      "input": "10 9",
      "output": "-1"
    },
    {
      "input": "12 15",
      "output": "-1"
    }
  ],
  "hint": "",
  "languages": [
    "C",
    "C++",
    "Golang",
    "Java",
    "JavaScript",
    "Python2",
    "Python3"
  ],
  "create_time": "2023-07-20T04:28:33.303878Z",
  "last_update_time": null,
  "time_limit": 1000,
  "memory_limit": 256,
  "io_mode": {
    "input": "input.txt",
    "output": "output.txt",
    "io_mode": "Standard IO"
  },
  "spj": false,
  "spj_language": null,
  "rule_type": "ACM",
  "difficulty": "Low",
  "source": "",
  "total_score": 0,
  "submission_number": 488,
  "accepted_number": 170,
  "statistic_info": {
    "0": 170,
    "4": 143,
    "-1": 128,
    "-2": 47
  },
  "share_submission": false,
  "contest": null,
  "my_status": 0
}