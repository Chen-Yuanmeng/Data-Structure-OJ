{
  "id": 4,
  "tags": [
    "树",
    "二叉树"
  ],
  "created_by": {
    "id": 1,
    "username": "admin",
    "real_name": null
  },
  "template": {},
  "_id": "1035",
  "title": "6.33-二叉树子孙判断",
  "description": "<p style=\"margin-left: 0px;\">假定用两个一维数组$L[n+1]$和$R[n+1]$作为有$n$个节点的二叉树的存储结构，$L[i]$和$R[i]$分别指示节点$i(i=1,2,...,n)$的左孩子和右孩子，0表示空。试写一个算法判别节点$u$是否为节点$v$的子孙。</p><p>例如，给定数组</p><p>L = 1 2 4 0 0 0</p><p>R = 1 3 5 0 0 0</p><p>数组表示的二叉树的示意图如下：</p><p><img alt=\"image.png\" src=\"http://152.136.172.65/public/upload/f97ef15095.png\" width=\"150\" height=\"222.3021582733813\" /><br /></p><p>注意：L和R的第一个元素为根节点。上例中，L[0]=R[0]=1，表示根节点为1。</p>",
  "input_description": "<p><span style=\"color: rgb(51, 51, 51);\">第一行和第二行是L和R数组，元素之间使用空格分隔</span></p><p><span style=\"color: rgb(51, 51, 51);\">第三行输入元素u和元素v，空格分隔</span></p>",
  "output_description": "<p><span style=\"color: rgb(51, 51, 51);\">输出u是否为v的子孙，是则输出1，否则输出0</span><br /></p>",
  "samples": [
    {
      "input": "1 2 4 0 0 0\n1 3 5 0 0 0\n4 2",
      "output": "1"
    },
    {
      "input": "1 2 0 4 0\n1 3 0 0 0\n4 2",
      "output": "0"
    }
  ],
  "hint": "",
  "languages": [
    "C",
    "C++",
    "Golang",
    "Java",
    "JavaScript",
    "Python2",
    "Python3"
  ],
  "create_time": "2023-07-20T04:04:09.594145Z",
  "last_update_time": null,
  "time_limit": 1000,
  "memory_limit": 256,
  "io_mode": {
    "input": "input.txt",
    "output": "output.txt",
    "io_mode": "Standard IO"
  },
  "spj": false,
  "spj_language": null,
  "rule_type": "ACM",
  "difficulty": "Low",
  "source": "",
  "total_score": 0,
  "submission_number": 235,
  "accepted_number": 111,
  "statistic_info": {
    "0": 111,
    "1": 3,
    "4": 15,
    "-1": 88,
    "-2": 18
  },
  "share_submission": false,
  "contest": null,
  "my_status": null
}